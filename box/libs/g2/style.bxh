#provide "g.style"
///Section: g

include "raw"
include "cmdstream"

///Intro: border width and color to be used when tracing the next
// polygon (for {type(Poly)}, {type(Circle)}, etc).
Border = ++((Int color, width) have
            Color color, Real width, Obj dash)

(.[)@Border[.have = (0, 0), .width = 0.0]

///Intro: specify the border width.
Real@Border[.width = $, .have.width = 1]

///Intro: specify the border color.
Color@Border[.color = $, .have.color = 1]

Border@Border[
  [If[$.have.width], $$.width = $.width, $$.have.width = 1]
  [If[$.have.color], $$.color = $.color, $$.have.color = 1]
]

///Intro: set the style for tracing the next polygon (for {type(Poly)},
// {type(Circle)}, etc).
Sty = ++((Int border, color) have
         Border border, Color color)

(.[)@Sty[.have = (0, 0)]

///Intro: set the filling color.
Color@Sty[.color = $, .have.color = 1]

///Intro: add the border settings to the {type(@.)} object.
Border@Sty[.border = $, .have.border = 1]

///Intro:
Sty@Sty[
  [If[$.have.color], $$.have.color = 1, $$.color = $.color]
  [If[$.have.border], $$.have.border = 1, \ $$.border[$.border]]
]

///Intro: translate the style object into raw commands.
Sty@CmdStream[
  do_stroke = $.have.border

  // Commands for filling
  [If[$.have.color]
     c = $.color, Obj[g.raw.set_source_rgba, c.r, c.g, c.b, c.a]]

  Obj[If[do_stroke], g.raw.fill_preserve
      Else[], g.raw.fill]

  // Commands for the style of the border
  [If[$.have.border]
     Obj[g.raw.save]

     [If[$.border.have.color]
        c = $.border.color
        Obj[g.raw.set_source_rgba, c.r, c.g, c.b, c.a]]

     [If[$.border.have.width], w = $.border.width, If[w > 0.0]
        Obj[g.raw.set_line_width, w]]

     Obj[g.raw.stroke]

     Obj[g.raw.restore]]
]
