// We define a tool for calculating the position of a bouncing ball

// Definition of the bounce object
Bounce = (Real gravity, attenuation, Point up, down)

([)@Bounce[
  .gravity = 9.81
  .attenuation = 0.8
  .up = (0, 1)
  .down = (0, 0)
]

Bounce.Pos = Point
Real@Bounce.Pos[
  // The trajectory is parabolic: if t' is the time measured from the previous
  // bouncing event and h is the height measured from the ground:
  //
  //   h(t') = v0'*t' - 0.5*g*t'^2
  //
  // However at each bounching the velocity is attenuated:
  //
  //   v0 --> a*v0 with a a positive number less (or equal) than 1.0
  //
  // Therefore the algorithm is the following:
  //   - given the time t (this is the global time, not the local time t')
  //     we find the number of bouncings n and the time tn when the last
  //     bouncing occurred. We then have t' = t - tn;
  //   - we then know that the velocity at the last bouncing event (t'=0)
  //     was v0' = v0*a^n, where v0 is the velocity at t=0;
  //   - we now have everything to calculate h(t')
  //
  // NOTE: We assume the ground is at h = 0, this is way we chose h(t')
  //       such that h(t'=0) = 0. The initial velocity v0 is related
  //       with the maximum height hmax (which is reached at t = v0'/g) by:
  //
  //         hmax = 0.5*(v0)^2/g
  //
  Print["Here";]
  t: = $, g: = $$$.gravity, a: = $$$.attenuation
  Print["Here2";]

  // Here we take hmax = 1, hence:
  v0: = Sqrt[2*g]

  // Bouncing period for the first bouncing
  t0: = 2.0*v0/g

  t += 0.5*t0 // Start from the maximum height

  // Time after which the ball is constantly touching the ground
  tmax: = t0/(1.0 - a)

  h: = 0.0
  [If[t < tmax]
    // Number of bouncings
    n: = Int[Log[1.0 - t/tmax] / Log[a]]

    // Attenuated velocity
    an: = Exp[n*Log[a]], vn = v0 * an

    // Time at the last bouncing event
    tn: = t0 * (an - 1.0) / (a - 1.0)

    // local time
    lt: = t - tn

    // Finally we can calculate the height
    h = lt * (vn - 0.5*g*lt) + v0*v0/(2.0*g) - 1.0
  ]

  vector = $$$.up - $$$.down
  $$ = $$$.down + h*vector
]
