///Section: g

// The Window object

(])@Window "window_end" ?

Str@Window "window_str" ?
Point@Window "window_size" ?

///Intro: specifies a {type(.@)} to be used in the drawing commands which
//  will follow in the Window.
Color@Window "window_color" ?
Gradient@Window "window_gradient" ?  ///Same.
OldStyle@Window "window_style" ?     ///Same.

///Intro: use the drawing style as a default in the next drawing commands.
Style@Window[OldStyle[$]]

///Intro: draw the content of a {type(.@)} inside the opened {type(@.)}
//  object.
Window@Window "window_window" ?

///Intro: method to be used to save the Window to a file.
Window.Save = Void

([)@Window.Save "window_save_begin" ?
(])@Window.Save "window_save_end" ?

///Intro: name of the file where to save the {type(Window)}.
//  The extension is read to determine the desired file format.
Str@Window.Save "window_save_str" ?

///Intro: a window object can be provided to specify where to save the content
//  of the parent Window. It can be either a complete Window or an incomplete
//  one.
Window@Window.Save "window_save_window" ?

Window.Hot = Point
([)@Window.Hot "window_hot_begin" ?
Point@Window.Hot "window_hot_point" ?
Str@Window.Hot "window_hot_string" ?
PointList@Window.Hot "window_hot_pointlist" ?
(])@Window.Hot "window_hot_end" ?

Window.Res = Void
Real@Window.Res "window_res_real" ?
Point@Window.Res "window_res_point" ?

Window.Origin = Void
Point@Window.Origin "window_origin_point" ?

Window.File = Void
Str@Window.File "window_file_string" ?

Window.Show = Void
Point@Window.Show "window_show_point" ?
BBox@Window.Show[\ $$[If[$.n & 1], $.min], \ $$[If[$.n & 2], $.max]]

///Intro: make sure the Window is large enough to contain the bounding box.
BBox@Window[.Show[$]]

// Teach BBox how to deal with Window
Window@BBox "window_bbox" ?

