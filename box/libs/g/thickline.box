///Section: g

#provide "g.thickline"

// For now this is just a wrapper of Window.Line, but later we will do things
// better than this...

///Intro: line with variable width.
ThickLine = ++(Obj args, Style style, Int close)

(.[)@ThickLine[.close = 0]

///Intro: the next point of the line.
Point@ThickLine[\ $$.args[$]]

///Intro: the thickness entering or exiting from a line point.
// For example, in ``Line[(10, 10), 1, 2.5, (0, 0), 3, ...]``, ``1`` is the
// thickness exiting from the first point of the line ``(10, 10)``,
// ``2.3`` is the thickness entering point ``(0, 0)`` while 3 is the thickness
// exiting the same point.
Real@ThickLine[\ $$.args[$]]

///Intro: close the line.
Close@ThickLine[$$.close = 1]

///Intro: start a new line.
(;)@ThickLine[\ $$.args[0]]

///Intro: the pattern, color or gradient used to draw the line.
Pattern@ThickLine[\ $$.style[$]]

///Intro: the style used to draw the line.
Style@ThickLine[\ $$.style[$]]

///Intro: set the smoothness level of the line.
LineStyle@ThickLine[\ $$.args[Obj[$.a, $.b, $.c, $.d]]]

///Intro: draw the thick line.
ThickLine@Window[
  n = Num[$.args]
  i = 0
  \ $$.Line[
    [If[i < n]
       argtype = $.args.GetType[i]
       [If[argtype == objtype.point], Point[$.args.Get[i]]
        Else[], If[argtype == objtype.real], Real[$.args.Get[i]],
        Else[], If[argtype == objtype.int];
        Else[], If[argtype == objtype.obj]
          LineStyle[ls = $.args.Get[i]
                    .a = Real[ls.Get[0]]
                    .b = Real[ls.Get[1]]
                    .c = Real[ls.Get[2]]
                    .d = Real[ls.Get[3]]]]
       i += 1
     For[1]]
    [If[$.close], .Close[]]
    [If[$.style.have.color], $.style.color]
    $.style
  ]
]
