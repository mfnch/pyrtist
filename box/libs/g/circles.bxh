#provide "g.circles"
///Section: g

include "circle"

///Intro: a collection of {type(Circle)} shapes.
Circles = ++(Obj circles, Circle last, Style style)

///Intro: add a {type(.@)} to the circle collection.
Circle@Circles[\ .circles[$]]

///Intro: use the parameters given so far to create a new {type(Circle)} and
// add it to the circle collection.
(;)@Circles[$$.last, $$.last.have.radius = 1]

///Intro: provide the radius for the next circle to add.
Real@Circles[\ $$.last[$]]

///Intro: provide the center for the next circle to add.
Point@Circles[\ $$.last[$]]

///Intro: style to use when drawing the circles.
Style@Circles[\ .style[$]]

///Intro: {type(.@)} used for filling the circle.
Color@Circles[\ .style[$]]
Gradient@Circles[\ .style[$]] ///Same.

///Intro: the number of circles in the {type(.@)} object.
Circles@Num[$[;].circles]

///Intro: get one {type(Circle)} in the collection.
Circles.Get = Circle

///Intro: index of the circle in the collection.
Int@Circles.Get[$$ = Circle[$$$.circles.Get[$]]]

///Intro: add the circle collection to the path.
Circles@Path[
  n = Num[$], i = 0
  [If[i < n], $.Get[i++], For[1]]
]

///Intro: pass the circle collection to the window for drawing.
Circles@Window[
  path = Path[$]
  If[!path.empty]
    path.cmdstream
    CmdStream[$.style]
]

