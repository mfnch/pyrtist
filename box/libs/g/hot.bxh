#provide "g.hot"

///Section: g

///Intro: list of hot points.
// A {type(Hot)} object is a named list of points, which can be used with
// {type(Put)} to place figures. The idea is that the user specifies where a
// "hot" point of the figure should go in the target window. This is done
// using a {type(Near)} object. For example, ``Near["hot_point", p1]`` means
// that the user wants the hot point with name ``hot_point`` to get as close
// as possible to the point ``p1`` in the destination {type(Window)}.
Hot = ++((Int name, point) have
         Str name, Point point
         Obj names, Obj points)

(.[)@Hot[.have = (0, 0)]

///Intro: the name of the next hot point.
Str@Hot[.name = $, .have.name = 1]

///Intro: the coordinates of the hot point.
Point@Hot[.point = $, .have.point = 1]

///Intro: end the specification of the current hot point.
// This allows adding another hot point.
(;)@Hot[
  [If[$$.have.name && !$$.have.point]
     Fail[Str["Coordinates for point '", $$.name, "' are missing!"]]]

  [If[$$.have.point]
     point_index = Num[$$.points]
     \ .points[$$.point]
     [If[$$.have.name]
        \ $$.names[Obj[$$.name, point_index]]]]

  $$.have.name = 0
  $$.have.point = 0
]

(])@Hot[;]

///Intro: get the index of a point in the hot list.
Hot.GetIndex = Int

///Intro: name of the point.
Str@Hot.GetIndex[
  i_index = -1

  i = 0
  num_named_points = Num[$$$.names]
  [If[i < num_named_points && i_index == -1]
     i_name = Str[$$$.names.Get[i].Get[0]]
     [If[Compare[($, i_name)] == 0]
        i_index = Int[$$$.names.Get[i].Get[1]]]        
   i += 1
   For[1]]
   
   $$ = i_index
]

///Intro: get a point from the hot point list.
Hot.Get = Point

///Intro: get a point from the given name.
Str@Hot.Get[
  i_index = $$$.GetIndex[$]
  [If[i_index == -1]
     Fail[Str["Cannot find a hot point with name '", $, "'."]]]
   $$ = Point[$$$.points.Get[i_index]]
]

