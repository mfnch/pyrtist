///Section: g

#provide "g.core"

///Intro: the {type(.)} object is the main object in the Box graphic library.
// It can correspond to a real drawing device (array of pixels allocated in
// memory, PDF/SVG file, etc) or can be simply a container of graphics
// commands to be stored for later manipulation.
Window = ++CPtr

(.[)@Window "Box_Lib_G_Init_At_Window" ?

(].)@Window "Box_Lib_G_Finish_At_Window" ?

Window(=)Window "Box_Lib_G_Window_Copy_Window" ?

///Intro: empty each of the object given as arguments.
// Obviously, the object must he a container of other objects.
Empty = Void

///Intro: transform an angle from degrees to radians.
Deg = Real

///Intro: the angle in degrees to be transformed to radians.
Real@Deg[$$ = $*0.01745329251994329576]

///Intro: resolution to be associated to a raster (bitmapped) image.
// The {type(.)} object is typically used to provide the resolution (points
// per inch) to be used when saving a figure (see {type(Window)} and
// {type(Figure)}) to a raster file format (such as PNG).
Resolution = ++(Point point,)

(.[)@Resolution[.point.x = .point.y = 0.0]

///Intro: set the resolution separately in the X and Y directions.
// The resolutions are provided in pixels (dots) per millimeter.
Point@Resolution[.point = $]

///Intro: ``Resolution[real]`` is equivalent to
// ``Resolution[Point[.x=.y=real]]``.
Real@Resolution[Point[.x=.y=$]]

///Intro: a {type(.)} if it is positive.
Resolution@IsValid[$.point.x > 0.0 && $.point.y > 0.0]

///Intro: resolution in Points Per Inch.
// {type(.)} is similar to {type(Resolution)}, but takes resolutions
// units of Points Per Inch (PPI) rather than Points Per Millimeter.
Ppi = Resolution

///Intro: set the resolution separately in the X and Y directions.
// The resolutions are provided in pixels (dots) per inch.
Point@Ppi[.point = $/25.4]

///Intro: ``Ppi[real]`` is equivalent to ``Ppi[Point[.x=.y=real]]``.
Real@Ppi[Point[.x=.y=$]]

///Intro: specify a resolution in DPI (Dots Per Inch).
Dpi = Real

///Intro: the resolution in DPI as a Real number.
Real@Dpi[$$ = $/25.4]

///Intro: the sign of a number.
// The sign is returned in form of an {type(Int)} number.
Sign = Int

///Intro: int number whose sign is desired.
Int@Sign[$$ = ($ > 0) - ($ < 0)]

///Intro: real number whose sign is desired.
REAL@Sign[$$ = ($ > 0) - ($ < 0)]
