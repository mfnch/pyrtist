#provide "g.hot"

///Section: g

///Intro: list of hot points.
// A {type(Hot)} object is a named list of points, which can be used with
// {type(Put)} to place figures. The idea is that the user specifies where a
// "hot" point of the figure should go in the target window. This is done
// using a {type(Near)} object. For example, ``Near["hot_point", p1]`` means
// that the user wants the hot point with name ``hot_point`` to get as close
// as possible to the point ``p1`` in the destination {type(Window)}.
///Example: ``Figure[..., Hot["first", (0, 0); "second", (1, 1); (2, 2)]]``.
// Note that when the name is not given, the point ends up not having a name.
// Unnamed points can be referred only by index.
Hot = ^((Int name, point) have
        Str name, Point point
        Obj names, Points points)

(.[)@Hot[.have = (0, 0)]

///Intro: number of hot points in the list.
Hot@Num[$.points]

///Intro: the name of the next hot point.
Str@Hot[.name = $, .have.name = 1]

///Intro: the coordinates of the hot point.
Point@Hot[
  [If[$$.have.point]
     Fail[Str["Got two point values for the same hot point. "
              "Did you forget to use the ; delimiter?";
              "Remember the usage: Hot[point1, name1; point2, name2; ...]"]]]
  .point = $
  .have.point = 1
]

///Intro: end the specification of the current hot point.
// This allows adding another hot point.
(;)@Hot[
  [If[$$.have.name && !$$.have.point]
     Fail[Str["Coordinates for point '", $$.name, "' are missing!"]]]

  [If[$$.have.point]
     \ .points[$$.point]
     [If[$$.have.name]
        point_index = Num[$$.points] - 1
        \ $$.names[Obj[$$.name, point_index]]]]

  $$.have.name = 0
  $$.have.point = 0
]

(])@Hot[;]

///Intro: get the index of a point in the hot list.
Hot.GetIndex = Int

///Intro: name of the point.
Str@Hot.GetIndex[
  i_index = -1

  i = 0
  num_named_points = Num[$$$.names]
  [If[i < num_named_points && i_index == -1]
     i_name = Str[$$$.names.Get[i].Get[0]]
     [If[Compare[($, i_name)] == 0]
        i_index = Int[$$$.names.Get[i].Get[1]]]        
   i += 1
   For[1]]
   
   $$ = i_index
]

///Intro: get the name associated with the given point index.
Hot.GetName = Str

///Intro: get a point from the hot point list.
// This behave similarly to {type(Points.Get)}.
Hot.Get = Point

///Intro: get a point from the given name.
Str@Hot.Get[
  i_index = $$$.GetIndex[$]
  [If[i_index == -1]
     Fail[Str["Cannot find a hot point with name '", $, "'."]]]
   $$ = Point[$$$.points.Get[i_index]]
]

///Intro: retrieve the point by index (see {type(Points.Get)}).
Int@Hot.Get[$$ = $$$.points.Get[$]]
REAL@Hot.Get[$$ = $$$.points.Get[$]]  ///<Same.
Point@Hot.Get[$$ = $$$.points.Get[$]] ///<Same.

///Intro: pass the list of hot points to the Window.
// The window will retain these points, which will be accessible through the
// Window.Get method.
Hot@Window[
  n_points = Num[$]
  i_points = 0

  n_names = Num[$.names]
  i_names = 0

  name_str = ""
  name_idx = -1

  [If[n_names > 0]
     name_str = Str[$.names.Get[0].Get[0]]
     name_idx = Int[$.names.Get[0].Get[1]]]

  [If[i_points < n_points]
     point = $.Get[i_points]
     point_has_name = (i_points == name_idx)

     \ $$.Hot[[If[point_has_name], name_str], point]

     [If[point_has_name]
        i_names += 1
        name_idx = -1
        [If[i_names < n_names]
           name_str = Str[$.names.Get[i_names].Get[0]]
           name_idx = Int[$.names.Get[i_names].Get[1]]]]
   i_points += 1
   For[1]]
]

///Intro: get the hot points of a {type(Window)} object.
Window@Hot[
  n = Num[$]
  i = 0
  [If[i < n]
     [If[$.HasNamedHotPoint[i]], $.GetHotPointName[i]]
     $.Get[i];
   i += 1
   For[1]]
]
