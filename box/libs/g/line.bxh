#provide "g.line"
///Section: g

include "raw"
include "style"
include "path"
include "points"

///Intro: create a {type(Line)} geometrical shape.
Line = ++((Int close,) have
          Points points, Real width
          StrokeStyle style)

(.[)@Line[.have = (0,)]

///Intro: next vertex in the line.
Point@Line[\ .points[$]]

///Intro: specify entering and exiting widths of the line.
Real@Line[\ .style[$]]

///Intro: change the stroke style for the line.
// This allow to change the line width, the join style, etc.
StrokeStyle@Line[\ .style[$]]

///Intro: set the color to use when drawing the line.
Color@Line[\ .style[$]]

///Intro: gradient to use when drawing the line.
Gradient@Line[\ .style[$]]

///Intro: set the {type(Dash)} style for drawing the line.
Dash@Line[\ .style[$]]

///Intro: close the line.
Close@Line[.have.close = 1]

///Intro: number of points of the line.
Line@Num[$.points]

///Intro: add the vertices of the line to the {type(@.)} object.
Line@Points[$.points]

///Intro: retrieve a point in the line.
// ``line.Get[x]`` is equivalent to ``Points[line].Get[x]``.
// See {type(Points.Get)}.
Line.Get = Point

///Intro: see {type(Points.Get)}.
Int@Line.Get[$$ = $$$.points.Get[$]]
REAL@Line.Get[$$ = $$$.points.Get[$]]  ///Same.
Point@Line.Get[$$ = $$$.points.Get[$]] ///Same.

///Intro: stroke the line.
Line@Stroke[
  num_points = Num[$.points]
  [If[num_points > 0]
     Obj[const.raw.move_to, $.points.Get[0]]

     point_idx = 1
     [If[point_idx < num_points]
      point = $.points.Get[point_idx++]
      Obj[const.raw.line_to, point]
      For[1]]
  
     [If[$.have.close]
        Obj[const.raw.close_path]]
     $$.path.empty = 0]
]

///Intro: add the path of the {type(Line)}.
Line@Path[
  
]

///Intro: draw the line in the window.
Line@Window[Stroke[$, $.style]]
