///Section: g

///Intro: bounding box object.
BBox = ++(Point min, Point max, Int n)

(.[)@BBox[$$.n = 0]

///Intro: number of points of the bounding box.
// This is 0 when the bounding box is unset, 1 when the bounding box has been
// been given just one point and > 1 when the bounding box is well defined.
// Note: a bounding box can be well defined and still be degenerate (have zero
// area).
BBox@Num[$.n]

///Intro: return the center of a bounding box.
BBox@Center[0.5*($.max + $.min)]

///Intro: return the area of the bounding box.
BBox@Area[If[Num[$] > 1], diag = $.max - $.min, diag.x*diag.y
          Else[], 0.0]

///Intro: expand the bounding box to contain the specified point.
Point@BBox[
  [If[$$.n == 0]
     $$.max = $, $$.min = $, $$.n = 1
   Else[], If[$$.n > 0]
     $$.min.x = Min[$$.min.x, $.x], $$.min.y = Min[$$.min.y, $.y]
     $$.max.x = Max[$$.max.x, $.x], $$.max.y = Max[$$.max.y, $.y]]

   $$.n += 1
]

///Intro: expand the bounding box to contain another bounding box.
BBox@BBox[$.min, $.max]

///Intro: stringify the BBox object.
BBox@Str[
  If[$.n == 0], "BBox[]"
  Else[], If[$.n == 1], "BBox[", $.min, "]"
  Else[], "BBox[", $.min, ", ", $.max, "]"
]

///Intro: print the bounding box object.
BBox@Print[Str[$]]
