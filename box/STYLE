STYLE OF THE CODE (20/03/2006):
  Unfortunatly the style is not omogeneous throughout the program!!!
  This problems is connected with the long life of this code and with my mind
  which changes with experience.
  Better to write down here some conventions:

  InThisWay   --> types
  in_this_way --> instances
  IN_THIS_WAY --> macros
  a, b, c, .. --> local instances (counters, and other instances)
  In_This_Way --> functions

  Name for functions usually starts with a prefix, such that it is simple
  to recognize where they are defined. For example: 'Cmp_Operator_New' comes
  from the file 'compiler.c'. Usually names for important functions defined
  in the same file begin with the same prefix, but it can happen that a longer
  prefix is used. Consider the file 'builtins.c' for example. Functions
  defined here starts with the prefix 'Blt'. An exception is 'Builtins_Define'.
  The reason for this choice is clear: avoid redundant letters (avoid things
  such as 'Blt_Builtins_Define': longer name, but no added information!).

  Tab length = 2, example:

  while( 1 ) {
    printf("Nothing to print!\n");
    printf("Really nothing!\n");
  }

FUNCTIONS: HOW WE DEAL WITH ERRORS....
  This typedef is defined inside 'types.h' which is included in almost every
  source file of the program:

    typedef enum {Failed, Success} Task;

  This is how we define many functions:

    /* This functions deals with a particular task and can exit with
     * or without errors
     */
    Task Do_Do_Do(...)
    {
        ...
        if (...) return Failed;   /* Exits in case of errors! */
        ...
        return Success;           /* Operation succesfully completed! */
    }

  Now we call this function, testing for errors:

    /* Main function */
    int main(void)
    {
        if IS_FAILED(Do_Do_Do(...))
            fprintf(stderr, "Error!\n");
    }
