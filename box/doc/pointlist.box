include "g"

//{init
// Create a PointList object containing 3 points
pl = PointList["one", (10, 20), "two", (50, 50), (100, 50)]
//}

//{get_simple
// You can refer to points by index and by name!
p1 = pl.Get[1]     // The points of pl can be retrieved by index...
p2 = pl.Get["two"] // ...or by name
p2 = pl.Get[3]     // The third point can only be referred by name, since
                   // we didn't provide a name!

// You can iterate over the points with:
i = 1, Print[pl.Get[i], For[++i <= pl.Num[]];] // Print all the points of pl
//}

//{indices
// Ciclic indexing!
last = pl.Get[4]         // Returns the first point, which is pl.Get[1]
last = pl.Get[0]         // Returns the last point, which is pl.Get[3]
last = pl.Get[-1]        // Returns the second last point, which is pl.Get[2]

// You can use floating point indices!
middle_12 = pl.Get[1.5]  // The point centered between pl.Get[1] and pl.Get[2]
near_1 = pl.Get[1.1]     // This point is quite near to pl.Get[1]
near_2 = pl.Get[1.9]     // and this is quite near to pl.Get[2]
//}

//{point_index
// You can use even a Point index!!!
x = 1.234
between_12 = pl.Get[(x, 0)] // This is equivalent to...
between_12 = pl.Get[x]      // ...this. For every x!

p = pl.Get[(1.6, 0.7)]      // The y component moves the point orthogonal
                            // to the current segment.
// p could be calculated also as:
v = pl.Get[2] - pl.Get[1]      // The vector "containing" 1.6
o = (-v.y, v.x)                // The orthogonal vector
p = pl.Get[1] + 0.6*v + 0.7*o  // But this is somewhat more complicated :-)
//}

//{extend
Print[pl;] // Print the PointList object
\ pl[(200, 50), "hey!", (123, 456)] // pl can be extended easily
Print[pl;] // Now pl has 5 elements!
//}
