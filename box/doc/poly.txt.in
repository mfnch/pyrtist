
Window.Poly instruction
-----------------------

The ``Poly`` method can be used to draw polygons.
It takes a list of points with optional margins:

.. code-block:: Box

  point_list = window.Poly[first_margin0, second_margin0, point1,
                           first_margin1, second_margin1, point2,
                           first_margin2, second_margin2, point3, ...]

The margins are real numbers and are used for rounding the corners.
You can omit them, if you want to draw a polygon with sharp corners.
For instance:

.. code-block:: Box

  //{sharp}

draws a polygon with vertices ``a``, ``b``, ``c`` and ``d``.
This is the produced output:

.. image:: poly1.png
   :align: center

The ``Poly`` instruction returns a ``PointList`` object containing
the vertices of the polygon. This ``PointList`` can be used in many ways.
It can be used, for example, to draw the polygon which connects the mid-points
of the original polygon sides:

.. code-block:: Box

  //{midpoints}

To understand the first line, you should take a look at the documentation
for the ``PointList`` object. Here we just remind that ``pl.Get[1.5]``
is the point between ``pl.Get[1]`` and ``pl.Get[2]``: the point
at the center of the first side of the polygon.
The second line here draws transparent red circles with radius 1
and center on the points of the ``PointList`` ``pl``.
Note that here we use ``\`` to ignore the ``PointList`` expression
generated by the ``Poly`` method invocation.
This is the result:

.. image:: poly2.png
   :align: center

Now we focus on how the polygon corners are rounded.
The idea is the following: for every edge of the polygon
we identify a sub-segment, which is just a part of it.
All the sub-segments are then traced one after the other,
using ellipse arcs to connect them.
In practice, between the vertices ``p1`` and ``p2`` of the polygon,
you can specify two real numbers ``r1`` and ``r2``:

.. code-block:: Box

  \ w.Poly[..., p1, r1, r2, p2, ...]

The optional numbers ``r1`` and ``r2`` are used to specify which part
of the edge ``p1``-``p2`` has to be connected with a straight line.
All the remaining bits are rounded!
In particular ``r1`` specifies the first margin, i.e.
the distance between the first point of the edge ``p1``
and the first point of the sub-segment ``m1``.
``r2`` specifies the second margin, i.e. the distance between
the second point of the sub-segment ``m2`` and the second
point of the edge ``p2``. They are calculated as
``m1 = p1 + r1*(p2 - p1)`` and ``m2 = p2 + r2*(p1 - p2)``.
Consequently when ``r1 = r2 = 0`` for all the edges, the polygon corners
are not rounded (this is the default behaviour).
When ``r1 = r2 = 0.5`` the polygon is "fully rounded",
meaning that it is made just of ellipse arcs.
It should be clear now that ``r1`` and ``r2`` must be positive numbers
whose sum can't be greater than 1.
If this is not the case, then the value ``new_r1 = Max[0.0, Min[1.0, r1]]``
is used for the first margin, while for the second,
``Max[0.0, Min[new_r1, r2]]`` is used.
Here is an example:

.. code-block:: Box

  //{margins}

which gives:

.. image:: poly3.png
   :align: center

Note that it is not necessary to specify both the margins:
if just the first margin ``r1`` is given, the second is assumed to be
the same (``r2 = r1``).
This behaviour makes sense only when ``r1 <= 0.5``
(remember that ``r1 + r2`` has to be lower than 1.0).
Therefore, when ``r1 > 0.5``, ``r2`` is calculated as ``1.0 - r1``.
If both the margins are not given, then the old margins are used.
In particular:

.. code-block:: Box

  Poly[..., p1, r1, r2, p2, p3, p4, ...]

is equivalent to:

.. code-block:: Box

  Poly[..., p1, r1, r2, p2, r2, r1, p3, r1, r2, p4, ...]

Note that the old margins are used with reversed order!
This behaviour makes it easy to draw corners with equal margins.

A single ``Window.Poly`` instruction can be used to draw several
polygons, using the ``;`` separator. Here is an example:

.. code-block:: Box

  //{one_margin}

Notice that we used the ``PointList`` object, which we obtained previously.
We also set the drawing style for the window ``w``.
This is necessary because a ``Poly`` instruction can be used also
to draw polygons with holes. This is actually the default drawing
style: polygons separated by ``;`` in the same ``Poly`` instruction
are used to draw just one figure with holes (the inner polygon is the hole).
We use ``Style[.Fill[";"]]`` to avoid this behaviour and force
the ``Poly`` instruction to start to draw a different polygon whenever ``;``
is found (see the documentation of the Style object for more info).
Here is the result:

.. image:: poly4.png
   :align: center

The rounding procedure works such that, if ``rect`` is a ``PointList``
containing the vertices of a rectangle, ``.Poly[0.5, rect]`` draws
the corresponding ellipse. Here is an example:

.. code-block:: Box

  //{ellipse}

which gives:

.. image:: ellipse.png
   :align: center

With margins greater than 0.5:

.. code-block:: Box

  //{big_margin}

we obtain:

.. image:: poly5.png
   :align: center

The ``PointList`` returned by the ``Poly`` instruction can be used
to do other fancy things:

.. code-block:: Box

  //{etc}

and here is the result:

.. image:: poly6.png
   :align: center

Here is the Box code used to generate all the pictures in this subsection:

.. code-block:: Box

  //{all}

