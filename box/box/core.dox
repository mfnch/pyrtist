///Section: core

///Intro: Box character type. Used to encode a single character in a string.
Char = ...

///Intro: the Box integer type.
// Does not allow implicit conversions from other types
// (see {type(Int)} for this).
INT = ...

Char@INT [... ///This.
INT@INT [...  ///This.
REAL@INT [... ///This.

///Intro: alernative to {type(INT)}, which allows implicit conversions from
// {type(Char)}.
// Internally defined as ``Int = (INT -> Char)``.
// This means that a procedure ``Int@Type`` allows the user to also specify
// {type(Char)} objects: they will be implicitely converted to {type(INT)}.
Int = ...


///Intro: the Box floating point type.
// Similar to {type(Real)} but does not allow implicit type conversions in the
// procedures in which it is used, example: ``REAL@Type`` won't allow the user
// to give integers rather than reals.
REAL = ...

///Intro: alternative to {type(REAL)}, which allows implicit type conversions
// from {type(INT)} or {type(Char)}.
// Defined as ``Real = (Char -> INT -> REAL)``.
// Behaves similarly to {type(REAL)}, but allows implicit conversion of
// integers and chars ({type(INT)} and {type(Char)} ). In other words a
// procedure ``Real@Type`` can process also {type(Char)} and {type(INT)}, by
// converting them to {type(REAL)} and calling ``Real@Type``.
Real = ...

///Intro:  the Box two dimensional point type. It is basically a couple
// of {type(REAL)} objects, but is treated with special care by the Box
// Virtual Machine.
POINT = ...

///Intro: alternative for {type(POINT)} allowing implicit type conversions
// from Real tuples. Defined as ``Point = ((Real, Real) -> POINT)``.
// This means that a procedure ``Point@Type`` can get things like ``(1, 2)``
// rather than ``Point[.x=1, .y=2]``.
Point = ...

///Intro: convert its arguments to strings and concatenate them into a Box
// string object. ``Str[]`` creates an empty string.
Str = ...

///Intro: type corresponding to the punctuation mark ``;``. It can be used
// in procedures (like ``(;)@Type``) to define what to do when Box finds a
// semicolon (as in ``Type[arg1, arg2; arg3]``).
(;) = ...

///Intro: the number of objects stored inside the given object.
// If more objects are provided, then return the cumulative sum of their
// elements.
Num = ...

///Intro: return a representation of the object in Box syntax.
Repr = ...

///Intro: print the given objects to the standard output.
Print = ...

Char@Print  [...] ///This.
INT@Print   [...] ///This.
REAL@Print  [...] ///This.
Point@Print [...] ///This.
Str@Print   [...] ///This.

