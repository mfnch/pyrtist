
PointList
---------

The ``PointList`` instruction can be used to create an array of named points.
The typical use is:

.. code-block:: Box

  pl = PointList["name1", point1, "name2", point2, ...]

The name is optional and, if given, comes just before the point it refers to.
Here is an example:

.. code-block:: Box

  //{init}

The points can be retrieved using the ``Get`` method:

.. code-block:: Box

  //{get_simple}

The last line shows how you can iterate over the elements of ``pl``.
``n = pl.Num[]`` is the number of points in the ``PointList``,
which is just 3 in the above example.
The elements are numbered starting from ``1``.
You can however use indices outside the interval ``1 - n``:

.. code-block:: Box

  //{indices}

``pl.Get[0]`` returns the last element of the list
(the one returned also by ``pl.Get[n]``, where ``n = pl.Num[]``) and,
in general, indices differing by a multiple of ``n`` refer
to the same element (circular indexing).
The method ``Get`` can take also a real number as an argument: if
``pl.Get[1]`` gives the first point of the list and ``pl.Get[2]`` gives
the second, then ``pl.Get[1.5]`` gives the point in the middle of these.
Mathematically, if x is a positive number less than unity:
``pl.Get[i+x] == pl.Get[i] + x*(pl.Get[i+1] - pl.Get[i])``,
for every integer number ``i``.
As a further extension, the ``Get`` method can take also a point
as an argument.

.. code-block:: Box

  //{point_index}

The y component of the point index corresponds to the direction orthogonal
to the one of the x component.
The example above shows how the point index is used to compute
the point returned by the method ``Get``.
Notice that there are two ways to choose a vector orthogonal
to a given one (in 2 dimensions). Here we adopt the convention
``o = (-v.y, v.x)``.

Extending an existing ``PointList`` is very simple:

.. code-block:: Box

  //{extend}

Further points are added to the ``PointList`` by just reopening ``pl``.
Here is the output of the previous lines:

.. include:: pointlist.out
  :literal:
